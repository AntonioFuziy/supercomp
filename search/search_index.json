{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SuperComputa\u00e7\u00e3o \u00b6 Bem vindo ao curso de SuperComputa\u00e7\u00e3o 2020/2. Professor : Igor Montagner Objetivos \u00b6 Ao final da disciplina o aluno ser\u00e1 capaz de: TODO: objetivos atualizados aqui Avalia\u00e7\u00e3o \u00b6 A avalia\u00e7\u00e3o da disciplina ser\u00e1 composta por provas, projetos e atividades de acompanhamentos: Provas Intermedi\u00e1ria (PI) e Final (PF) ser\u00e3o compostas por exerc\u00edcios pr\u00e1ticos a serem feitos durante o tempo de prova; O projeto da disciplina ser\u00e1 composto por m\u00faltiplas partes. Mais detalhes na p\u00e1gina de projetos A m\u00e9dia final \u00e9 dada por TODO: composi\u00e7\u00e3o da nota final aqui! Condi\u00e7\u00f5es de barreira TODO: crit\u00e9rios de barreira aqui! Mesmo que todas as condi\u00e7\u00f5es acima sejam satisfeitas \u00e9 poss\u00edvel reprovar. Um desempenho abaixo do esperado em uma atividade precisa ser compensado com um desempenho melhor em outra atividade.","title":"Home"},{"location":"#supercomputacao","text":"Bem vindo ao curso de SuperComputa\u00e7\u00e3o 2020/2. Professor : Igor Montagner","title":"SuperComputa\u00e7\u00e3o"},{"location":"#objetivos","text":"Ao final da disciplina o aluno ser\u00e1 capaz de: TODO: objetivos atualizados aqui","title":"Objetivos"},{"location":"#avaliacao","text":"A avalia\u00e7\u00e3o da disciplina ser\u00e1 composta por provas, projetos e atividades de acompanhamentos: Provas Intermedi\u00e1ria (PI) e Final (PF) ser\u00e3o compostas por exerc\u00edcios pr\u00e1ticos a serem feitos durante o tempo de prova; O projeto da disciplina ser\u00e1 composto por m\u00faltiplas partes. Mais detalhes na p\u00e1gina de projetos A m\u00e9dia final \u00e9 dada por TODO: composi\u00e7\u00e3o da nota final aqui! Condi\u00e7\u00f5es de barreira TODO: crit\u00e9rios de barreira aqui! Mesmo que todas as condi\u00e7\u00f5es acima sejam satisfeitas \u00e9 poss\u00edvel reprovar. Um desempenho abaixo do esperado em uma atividade precisa ser compensado com um desempenho melhor em outra atividade.","title":"Avalia\u00e7\u00e3o"},{"location":"sobre/","text":"Burocracias \u00b6 Turma 1 (Online) \u00b6 TER 09:45 - 11:45 SEX 07:30 - 09:30 Atendimento: SEX 09:30 - 11:00 Plano de aulas Data Quest\u00e3o/Problema Conte\u00fado/Atividade 11/02 Revis\u00e3o de programa\u00e7\u00e3o em C mais recursos novos em C++ Introdu\u00e7\u00e3o ao curso; Princ\u00edpios de C++; Refer\u00eancia: Pacheco Cap 2. 14/02 Revis\u00e3o de programa\u00e7\u00e3o em C mais recursos novos em C++ Orienta\u00e7\u00e3o a Objeto em C++; revis\u00e3o de ponteiros e passagem de argumentos por refer\u00eancia e valor 18/02 Revis\u00e3o de programa\u00e7\u00e3o em C mais recursos novos em C++ Conteiners STL: vector, string, map 21/02 Revis\u00e3o de programa\u00e7\u00e3o em C mais recursos novos em C++ Debug, profiling e compila\u00e7\u00e3o 25/02 FERIADO FERIADO 28/02 Processamento de dados vetorial Instru\u00e7\u00f5es SIMD e compila\u00e7\u00e3o; Refer\u00eancia: Cap 2 Hager, Cap 3 Dubois 03/03 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Introdu\u00e7\u00e3o a problemas CPU bound; Modelo fork-join; Exemplo com threads C++11; Leitura: Cap 5 Hager 06/03 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Introdu\u00e7\u00e3o a OpenMP; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 10/03 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Opera\u00e7\u00f5es de redu\u00e7\u00e3o e escopo de vari\u00e1veis; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 13/03 Cancelamento COVID-19 Cancelamento COVID-19 17/03 Cancelamento COVID-19 Cancelamento COVID-19 20/03 Cancelamento COVID-19 Cancelamento COVID-19 24/03 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo C\u00f3digo thread-safety e reentr\u00e2ncia; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 27/03 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Introdu\u00e7\u00e3o a problemas IO bound; Constru\u00e7\u00f5es de alto n\u00edvel do OpenMP; Sincroniza\u00e7\u00e3o usando mutex e sem\u00e1foros.; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 31/03 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Simulado de atividade pr\u00e1tica para prova 03/04 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Projeto 2 - vetoriza\u00e7\u00e3o e paraleliza\u00e7\u00e3o 07/04 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Projeto 2 - vetoriza\u00e7\u00e3o e paraleliza\u00e7\u00e3o 10/04 FERIADO FERIADO 14/04 Provas Intermedi\u00e1rias Provas Intermedi\u00e1rias 17/04 Provas Intermedi\u00e1rias Provas Intermedi\u00e1rias 21/04 FERIADO FERIADO 24/04 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Introdu\u00e7\u00e3o a GPGPU; Refer\u00eancia: Cap 1 Kirk 28/04 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Arquitetura de GPU em baixo n\u00edvel: Grid, Blocos e Threads; Leitura: Cap3 Gaster, Cap 3 Kirk 01/05 FERIADO FERIADO 05/05 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Processando matrizes com Cuda C, profiling de c\u00f3digo em Cuda.; Refer\u00eancia: Cap 7 Kirk 08/05 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Exerc\u00edcios de programa\u00e7\u00e3o em GPGPU 12/05 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Otimizando c\u00f3digo Cuda C \u2013 mem\u00f3ria compartilhada; Refer\u00eancia: Cap 4 Kirk 15/05 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Projeto 3 - paraleliza\u00e7\u00e3o em GPU 19/05 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Projeto 3 - paraleliza\u00e7\u00e3o em GPU 22/05 \u00c9 poss\u00edvel ganhar mais? Utilizando v\u00e1rias m\u00e1quinas para acelerar ainda mais sistemas. Introdu\u00e7\u00e3o a sistemas distribu\u00eddos; Passagem de mensagens; Refer\u00eancia: Parte IV Taurion; Cap 9 Hager 26/05 \u00c9 poss\u00edvel ganhar mais? Utilizando v\u00e1rias m\u00e1quinas para acelerar ainda mais sistemas. Modelos de divis\u00e3o carga: dados vs tarefas; Refer\u00eancia: Cap 9 Hager 29/05 \u00c9 poss\u00edvel ganhar mais? Utilizando v\u00e1rias m\u00e1quinas para acelerar ainda mais sistemas. Custos de comunica\u00e7\u00e3o e processamento; mensagens ass\u00edncronas; Refer\u00eancia: Cap 10 Hager, Leitura: \u201cA survey of high-performance computing scaling challenges\u201d 02/06 \u00c9 poss\u00edvel ganhar mais? Utilizando v\u00e1rias m\u00e1quinas para acelerar ainda mais sistemas. Comunica\u00e7\u00e3o coletiva; Refer\u00eancia: Cap 13 Reinders, Cap 10 Hager 05/06 Simulado de atividade pr\u00e1tica para prova Simulado de atividade pr\u00e1tica para prova 09/06 \u00c9 poss\u00edvel ganhar mais? Utilizando v\u00e1rias m\u00e1quinas para acelerar ainda mais sistemas. Projeto 4 - aplica\u00e7\u00f5es distribu\u00eddas 12/06 FERIADO FERIADO 16/06 Prova Final Prova Final 19/06 Prova Final Prova Final Turma 2 (Presencial) \u00b6 QUA 13:30 - 15:30 SEX 13:30 - 15:30 Atendimento: SEX 15:30 - 17:00 Plano de aulas Data Quest\u00e3o/Problema Conte\u00fado/Atividade 12/02 Revis\u00e3o de programa\u00e7\u00e3o em C mais recursos novos em C++ Introdu\u00e7\u00e3o ao curso; Princ\u00edpios de C++; Refer\u00eancia: Pacheco Cap 2. 14/02 Revis\u00e3o de programa\u00e7\u00e3o em C mais recursos novos em C++ Orienta\u00e7\u00e3o a Objeto em C++; revis\u00e3o de ponteiros e passagem de argumentos por refer\u00eancia e valor 19/02 Revis\u00e3o de programa\u00e7\u00e3o em C mais recursos novos em C++ Conteiners STL: vector, string, map 21/02 Revis\u00e3o de programa\u00e7\u00e3o em C mais recursos novos em C++ Debug, profiling e compila\u00e7\u00e3o 26/02 FERIADO FERIADO 28/02 Processamento de dados vetorial Instru\u00e7\u00f5es SIMD e compila\u00e7\u00e3o; Refer\u00eancia: Cap 2 Hager, Cap 3 Dubois 04/03 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Introdu\u00e7\u00e3o a problemas CPU bound; Modelo fork-join; Exemplo com threads C++11; Leitura: Cap 5 Hager 06/03 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Introdu\u00e7\u00e3o a OpenMP; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 11/03 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Opera\u00e7\u00f5es de redu\u00e7\u00e3o e escopo de vari\u00e1veis; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 13/03 Cancelamento COVID-19 Cancelamento COVID-19 18/03 Cancelamento COVID-19 Cancelamento COVID-19 20/03 Cancelamento COVID-19 Cancelamento COVID-19 25/03 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo C\u00f3digo thread-safety e reentr\u00e2ncia; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 27/03 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Introdu\u00e7\u00e3o a problemas IO bound; Constru\u00e7\u00f5es de alto n\u00edvel do OpenMP; Sincroniza\u00e7\u00e3o usando mutex e sem\u00e1foros.; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 01/04 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Simulado de atividade pr\u00e1tica para prova 03/04 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Projeto 2 - vetoriza\u00e7\u00e3o e paraleliza\u00e7\u00e3o 08/04 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Projeto 2 - vetoriza\u00e7\u00e3o e paraleliza\u00e7\u00e3o 10/04 FERIADO FERIADO 15/04 Provas Intermedi\u00e1rias Provas Intermedi\u00e1rias 17/04 Provas Intermedi\u00e1rias Provas Intermedi\u00e1rias 22/04 FERIADO FERIADO 24/04 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Introdu\u00e7\u00e3o a GPGPU; Refer\u00eancia: Cap 1 Kirk 29/04 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Arquitetura de GPU em baixo n\u00edvel: Grid, Blocos e Threads; Leitura: Cap3 Gaster, Cap 3 Kirk 01/05 FERIADO FERIADO 06/05 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Processando matrizes com Cuda C, profiling de c\u00f3digo em Cuda.; Refer\u00eancia: Cap 7 Kirk 08/05 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Exerc\u00edcios de programa\u00e7\u00e3o em GPGPU 13/05 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Otimizando c\u00f3digo Cuda C \u2013 mem\u00f3ria compartilhada; Refer\u00eancia: Cap 4 Kirk 15/05 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Projeto 3 - paraleliza\u00e7\u00e3o em GPU 20/05 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Projeto 3 - paraleliza\u00e7\u00e3o em GPU 22/05 \u00c9 poss\u00edvel ganhar mais? Utilizando v\u00e1rias m\u00e1quinas para acelerar ainda mais sistemas. Introdu\u00e7\u00e3o a sistemas distribu\u00eddos; Passagem de mensagens; Refer\u00eancia: Parte IV Taurion; Cap 9 Hager 27/05 \u00c9 poss\u00edvel ganhar mais? Utilizando v\u00e1rias m\u00e1quinas para acelerar ainda mais sistemas. Modelos de divis\u00e3o carga: dados vs tarefas; Refer\u00eancia: Cap 9 Hager 29/05 \u00c9 poss\u00edvel ganhar mais? Utilizando v\u00e1rias m\u00e1quinas para acelerar ainda mais sistemas. Custos de comunica\u00e7\u00e3o e processamento; mensagens ass\u00edncronas; Refer\u00eancia: Cap 10 Hager, Leitura: \u201cA survey of high-performance computing scaling challenges\u201d 03/06 \u00c9 poss\u00edvel ganhar mais? Utilizando v\u00e1rias m\u00e1quinas para acelerar ainda mais sistemas. Comunica\u00e7\u00e3o coletiva; Refer\u00eancia: Cap 13 Reinders, Cap 10 Hager 05/06 Simulado de atividade pr\u00e1tica para prova Simulado de atividade pr\u00e1tica para prova 10/06 \u00c9 poss\u00edvel ganhar mais? Utilizando v\u00e1rias m\u00e1quinas para acelerar ainda mais sistemas. Projeto 4 - aplica\u00e7\u00f5es distribu\u00eddas 12/06 FERIADO FERIADO 17/06 Prova Final Prova Final 19/06 Prova Final Prova Final","title":"Burocracias"},{"location":"sobre/#burocracias","text":"","title":"Burocracias"},{"location":"sobre/#turma-1-online","text":"TER 09:45 - 11:45 SEX 07:30 - 09:30 Atendimento: SEX 09:30 - 11:00 Plano de aulas Data Quest\u00e3o/Problema Conte\u00fado/Atividade 11/02 Revis\u00e3o de programa\u00e7\u00e3o em C mais recursos novos em C++ Introdu\u00e7\u00e3o ao curso; Princ\u00edpios de C++; Refer\u00eancia: Pacheco Cap 2. 14/02 Revis\u00e3o de programa\u00e7\u00e3o em C mais recursos novos em C++ Orienta\u00e7\u00e3o a Objeto em C++; revis\u00e3o de ponteiros e passagem de argumentos por refer\u00eancia e valor 18/02 Revis\u00e3o de programa\u00e7\u00e3o em C mais recursos novos em C++ Conteiners STL: vector, string, map 21/02 Revis\u00e3o de programa\u00e7\u00e3o em C mais recursos novos em C++ Debug, profiling e compila\u00e7\u00e3o 25/02 FERIADO FERIADO 28/02 Processamento de dados vetorial Instru\u00e7\u00f5es SIMD e compila\u00e7\u00e3o; Refer\u00eancia: Cap 2 Hager, Cap 3 Dubois 03/03 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Introdu\u00e7\u00e3o a problemas CPU bound; Modelo fork-join; Exemplo com threads C++11; Leitura: Cap 5 Hager 06/03 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Introdu\u00e7\u00e3o a OpenMP; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 10/03 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Opera\u00e7\u00f5es de redu\u00e7\u00e3o e escopo de vari\u00e1veis; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 13/03 Cancelamento COVID-19 Cancelamento COVID-19 17/03 Cancelamento COVID-19 Cancelamento COVID-19 20/03 Cancelamento COVID-19 Cancelamento COVID-19 24/03 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo C\u00f3digo thread-safety e reentr\u00e2ncia; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 27/03 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Introdu\u00e7\u00e3o a problemas IO bound; Constru\u00e7\u00f5es de alto n\u00edvel do OpenMP; Sincroniza\u00e7\u00e3o usando mutex e sem\u00e1foros.; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 31/03 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Simulado de atividade pr\u00e1tica para prova 03/04 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Projeto 2 - vetoriza\u00e7\u00e3o e paraleliza\u00e7\u00e3o 07/04 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Projeto 2 - vetoriza\u00e7\u00e3o e paraleliza\u00e7\u00e3o 10/04 FERIADO FERIADO 14/04 Provas Intermedi\u00e1rias Provas Intermedi\u00e1rias 17/04 Provas Intermedi\u00e1rias Provas Intermedi\u00e1rias 21/04 FERIADO FERIADO 24/04 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Introdu\u00e7\u00e3o a GPGPU; Refer\u00eancia: Cap 1 Kirk 28/04 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Arquitetura de GPU em baixo n\u00edvel: Grid, Blocos e Threads; Leitura: Cap3 Gaster, Cap 3 Kirk 01/05 FERIADO FERIADO 05/05 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Processando matrizes com Cuda C, profiling de c\u00f3digo em Cuda.; Refer\u00eancia: Cap 7 Kirk 08/05 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Exerc\u00edcios de programa\u00e7\u00e3o em GPGPU 12/05 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Otimizando c\u00f3digo Cuda C \u2013 mem\u00f3ria compartilhada; Refer\u00eancia: Cap 4 Kirk 15/05 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Projeto 3 - paraleliza\u00e7\u00e3o em GPU 19/05 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Projeto 3 - paraleliza\u00e7\u00e3o em GPU 22/05 \u00c9 poss\u00edvel ganhar mais? Utilizando v\u00e1rias m\u00e1quinas para acelerar ainda mais sistemas. Introdu\u00e7\u00e3o a sistemas distribu\u00eddos; Passagem de mensagens; Refer\u00eancia: Parte IV Taurion; Cap 9 Hager 26/05 \u00c9 poss\u00edvel ganhar mais? Utilizando v\u00e1rias m\u00e1quinas para acelerar ainda mais sistemas. Modelos de divis\u00e3o carga: dados vs tarefas; Refer\u00eancia: Cap 9 Hager 29/05 \u00c9 poss\u00edvel ganhar mais? Utilizando v\u00e1rias m\u00e1quinas para acelerar ainda mais sistemas. Custos de comunica\u00e7\u00e3o e processamento; mensagens ass\u00edncronas; Refer\u00eancia: Cap 10 Hager, Leitura: \u201cA survey of high-performance computing scaling challenges\u201d 02/06 \u00c9 poss\u00edvel ganhar mais? Utilizando v\u00e1rias m\u00e1quinas para acelerar ainda mais sistemas. Comunica\u00e7\u00e3o coletiva; Refer\u00eancia: Cap 13 Reinders, Cap 10 Hager 05/06 Simulado de atividade pr\u00e1tica para prova Simulado de atividade pr\u00e1tica para prova 09/06 \u00c9 poss\u00edvel ganhar mais? Utilizando v\u00e1rias m\u00e1quinas para acelerar ainda mais sistemas. Projeto 4 - aplica\u00e7\u00f5es distribu\u00eddas 12/06 FERIADO FERIADO 16/06 Prova Final Prova Final 19/06 Prova Final Prova Final","title":"Turma 1 (Online)"},{"location":"sobre/#turma-2-presencial","text":"QUA 13:30 - 15:30 SEX 13:30 - 15:30 Atendimento: SEX 15:30 - 17:00 Plano de aulas Data Quest\u00e3o/Problema Conte\u00fado/Atividade 12/02 Revis\u00e3o de programa\u00e7\u00e3o em C mais recursos novos em C++ Introdu\u00e7\u00e3o ao curso; Princ\u00edpios de C++; Refer\u00eancia: Pacheco Cap 2. 14/02 Revis\u00e3o de programa\u00e7\u00e3o em C mais recursos novos em C++ Orienta\u00e7\u00e3o a Objeto em C++; revis\u00e3o de ponteiros e passagem de argumentos por refer\u00eancia e valor 19/02 Revis\u00e3o de programa\u00e7\u00e3o em C mais recursos novos em C++ Conteiners STL: vector, string, map 21/02 Revis\u00e3o de programa\u00e7\u00e3o em C mais recursos novos em C++ Debug, profiling e compila\u00e7\u00e3o 26/02 FERIADO FERIADO 28/02 Processamento de dados vetorial Instru\u00e7\u00f5es SIMD e compila\u00e7\u00e3o; Refer\u00eancia: Cap 2 Hager, Cap 3 Dubois 04/03 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Introdu\u00e7\u00e3o a problemas CPU bound; Modelo fork-join; Exemplo com threads C++11; Leitura: Cap 5 Hager 06/03 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Introdu\u00e7\u00e3o a OpenMP; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 11/03 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Opera\u00e7\u00f5es de redu\u00e7\u00e3o e escopo de vari\u00e1veis; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 13/03 Cancelamento COVID-19 Cancelamento COVID-19 18/03 Cancelamento COVID-19 Cancelamento COVID-19 20/03 Cancelamento COVID-19 Cancelamento COVID-19 25/03 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo C\u00f3digo thread-safety e reentr\u00e2ncia; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 27/03 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Introdu\u00e7\u00e3o a problemas IO bound; Constru\u00e7\u00f5es de alto n\u00edvel do OpenMP; Sincroniza\u00e7\u00e3o usando mutex e sem\u00e1foros.; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 01/04 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Simulado de atividade pr\u00e1tica para prova 03/04 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Projeto 2 - vetoriza\u00e7\u00e3o e paraleliza\u00e7\u00e3o 08/04 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Projeto 2 - vetoriza\u00e7\u00e3o e paraleliza\u00e7\u00e3o 10/04 FERIADO FERIADO 15/04 Provas Intermedi\u00e1rias Provas Intermedi\u00e1rias 17/04 Provas Intermedi\u00e1rias Provas Intermedi\u00e1rias 22/04 FERIADO FERIADO 24/04 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Introdu\u00e7\u00e3o a GPGPU; Refer\u00eancia: Cap 1 Kirk 29/04 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Arquitetura de GPU em baixo n\u00edvel: Grid, Blocos e Threads; Leitura: Cap3 Gaster, Cap 3 Kirk 01/05 FERIADO FERIADO 06/05 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Processando matrizes com Cuda C, profiling de c\u00f3digo em Cuda.; Refer\u00eancia: Cap 7 Kirk 08/05 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Exerc\u00edcios de programa\u00e7\u00e3o em GPGPU 13/05 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Otimizando c\u00f3digo Cuda C \u2013 mem\u00f3ria compartilhada; Refer\u00eancia: Cap 4 Kirk 15/05 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Projeto 3 - paraleliza\u00e7\u00e3o em GPU 20/05 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Projeto 3 - paraleliza\u00e7\u00e3o em GPU 22/05 \u00c9 poss\u00edvel ganhar mais? Utilizando v\u00e1rias m\u00e1quinas para acelerar ainda mais sistemas. Introdu\u00e7\u00e3o a sistemas distribu\u00eddos; Passagem de mensagens; Refer\u00eancia: Parte IV Taurion; Cap 9 Hager 27/05 \u00c9 poss\u00edvel ganhar mais? Utilizando v\u00e1rias m\u00e1quinas para acelerar ainda mais sistemas. Modelos de divis\u00e3o carga: dados vs tarefas; Refer\u00eancia: Cap 9 Hager 29/05 \u00c9 poss\u00edvel ganhar mais? Utilizando v\u00e1rias m\u00e1quinas para acelerar ainda mais sistemas. Custos de comunica\u00e7\u00e3o e processamento; mensagens ass\u00edncronas; Refer\u00eancia: Cap 10 Hager, Leitura: \u201cA survey of high-performance computing scaling challenges\u201d 03/06 \u00c9 poss\u00edvel ganhar mais? Utilizando v\u00e1rias m\u00e1quinas para acelerar ainda mais sistemas. Comunica\u00e7\u00e3o coletiva; Refer\u00eancia: Cap 13 Reinders, Cap 10 Hager 05/06 Simulado de atividade pr\u00e1tica para prova Simulado de atividade pr\u00e1tica para prova 10/06 \u00c9 poss\u00edvel ganhar mais? Utilizando v\u00e1rias m\u00e1quinas para acelerar ainda mais sistemas. Projeto 4 - aplica\u00e7\u00f5es distribu\u00eddas 12/06 FERIADO FERIADO 17/06 Prova Final Prova Final 19/06 Prova Final Prova Final","title":"Turma 2 (Presencial)"},{"location":"aulas/01-introducao/","text":"01 - Recursos \u00fateis de C++ \u00b6 A disciplina utilizar\u00e1 a linguagem C++ para implementa\u00e7\u00e3o dos programas. Ela \u00e9 muito usada em implementa\u00e7\u00f5es de alto desempenho e possui recursos muito \u00fateis e que simplificam a programa\u00e7\u00e3o se comparada com C puro. Nas aulas 01 e 02 aprenderemos alguns desses recursos e os utilizaremos para implementa\u00e7\u00e3o de algoritmos simples. Gabaritos e respostas Este curso n\u00e3o fornece c\u00f3digo de resposta para os exerc\u00edcios de sala. Cada exerc\u00edcio \u00e9 acompanhado de um algoritmo em pseudo-c\u00f3digo e alguns pares de arquivos entrada/sa\u00edda. Isto j\u00e1 \u00e9 suficiente para que voc\u00eas verifiquem se sua solu\u00e7\u00e3o est\u00e1 correta. Boas pr\u00e1ticas de programa\u00e7\u00e3o ser\u00e3o demonstradas em exerc\u00edcios corrigidos pelo professor durante o semestre. Uma lista (n\u00e3o exaustiva) dessas pr\u00e1ticas estar\u00e1 dispon\u00edveis na p\u00e1gina Projeto . Compila\u00e7\u00e3o \u00b6 Programas em C++ s\u00e3o compilados com o comando g++ . Ele funciona igual ao gcc que voc\u00eas j\u00e1 usaram em Desafios e Sistemas Hardware-Software. $> g++ arquivo.cpp -o executavel Entrada e sa\u00edda em C++ \u00b6 Em C usamos as fun\u00e7\u00f5es printf para mostrar dados no terminal e scanf para ler dados. Em C++ essas fun\u00e7\u00f5es tamb\u00e9m podem ser usadas, mas em geral s\u00e3o substitu\u00eddas pelos objetos std::cin e std::cout (dispon\u00edveis no cabe\u00e7alho iostream). A maior vantagem de usar cin e cout \u00e9 que n\u00e3o precisamos mais daquelas strings de formata\u00e7\u00e3o estranhas com %d , %s e afins. Podemos passar vari\u00e1veis diretamente para a sa\u00edda do terminal usando o operador << . Veja um exemplo abaixo. int a = 10 ; double b = 3.2 ; std :: cout << \"Sa\u00edda: \" << a << \";\" << b << \" \\n \" ; Example Crie um arquivo entrada-saida.cpp com uma fun\u00e7\u00e3o main que roda o c\u00f3digo acima. Compile e execute seu programa e verifique que ele mostra o valor correto no terminal. O mesmo vale para a entrada, mas desta vez \"tiramos\" os dados do objeto std::cin . O exemplo abaixo l\u00ea um inteiro e um double do terminal. int a ; double b ; std :: cin >> a >> b ; Example Modifique seu programa entrada-saida.cpp para ler \u00ea um n\u00famero inteiro n e mostrar sua divis\u00e3o fracion\u00e1ria por 2. Ou seja, antes de dividir converta n para double . E esse std:: ? Em C++ podemos ter v\u00e1rias fun\u00e7\u00f5es, vari\u00e1veis e objetos em geral com o mesmo nome. Para evitar que eles colidam e n\u00e3o se saiba a qual estamos nos referindo cada nome deve ser definido um namespace (literalmente espaco de nomes ). Podemos ter namespace s aninhados.Por exemplo, std::chrono cont\u00e9m as fun\u00e7\u00f5es relacionadas contagem de tempo durante a execu\u00e7\u00e3o de um programa. Todas as fun\u00e7\u00f5es, classes e globais na biblioteca padr\u00e3o est\u00e3o definidas no espa\u00e7o std . Se quisermos, podemos omitir escrever std:: toda vez digitando using namespace std . Isso pode ser feito tamb\u00e9m com namespaces aninhados. A implementa\u00e7\u00e3o de algoritmos definidos usando express\u00f5es matem\u00e1ticas \u00e9 uma habilidade importante neste curso. Example Escreva um programa que receba um inteiro n e calcule a seguinte s\u00e9rie. S = \\sum_{i=0}^n \\frac{1}{2^i} S = \\sum_{i=0}^n \\frac{1}{2^i} Mostre as primeiras 15 casas decimais de S . Veja a documenta\u00e7\u00e3o de std::setprecision aqui . Resposta Essa s\u00e9rie converge para o n\u00famero 2, mas sua resposta dever\u00e1 ser sempre menor que este n\u00famero. Logo, quanto maior n mais pr\u00f3xima sua resposta ser\u00e1. Seu programa dever\u00e1 implementar algo como o algoritmo abaixo. leia inteiro n s = 0.0 para i=0 at\u00e9 n s += 1 / (2 elevado a i) print(s) Aloca\u00e7\u00e3o de mem\u00f3ria \u00b6 Em C usamos as fun\u00e7\u00f5es malloc e free para alocar mem\u00f3ria dinamicamente. Um inconveniente dessas fun\u00e7\u00f5es \u00e9 que sempre temos que passar o tamanho que queremos em bytes. Em C++ essas fun\u00e7\u00f5es tamb\u00e9m est\u00e3o dispon\u00edveis, mas us\u00e1-las \u00e9 considerado uma m\u00e1 pr\u00e1tica. Ao inv\u00e9s, usamos os operadores new e delete para alocar mem\u00f3ria. Existem duas vantagens em us\u00e1-los. Podemos escrever diretamente o tipo que queremos, em vez de seu tamanho em bytes. A aloca\u00e7\u00e3o de arrays \u00e9 feita de maneira natural usando os colchetes [] . Vejamos o exemplo abaixo. int n ; std :: cin >> n ; double * values = new double [ n ]; /* usar values aqui */ delete [] values ; \u00c9 alocado um vetor de double de tamanho n (lido do terminal). Ap\u00f3s ele ser usado liberamos o espa\u00e7o alocado usando delete[] . E se eu quiser alocar um s\u00f3 valor? \u00c9 simples! \u00c9 s\u00f3 usar new sem os colchetes [] ! Example Crie um programa que l\u00ea um n\u00famero inteiro n e depois l\u00ea n n\u00fameros fracion\u00e1rios x_i x_i . Fa\u00e7a os seguintes c\u00e1lculos e motre-os no terminal com 10 casas decimais. \\mu = \\frac{1}{n} \\sum_{i=1}^n x_i \\mu = \\frac{1}{n} \\sum_{i=1}^n x_i \\sigma^2 = \\frac{1}{n} \\sum_{i=1}^n (x_i - \\mu)^2 \\sigma^2 = \\frac{1}{n} \\sum_{i=1}^n (x_i - \\mu)^2 Resposta Os arquivos t4-in-(1,2,3).txt e t4-out-(1,2,3).txt devem ser usados para testar seu programa. Question Voc\u00ea reconhece as f\u00f3rmulas acima? Elas calculam quais medidas estat\u00edsticas? Resposta M\u00e9dia e vari\u00e2ncia. Vetores em C++ \u00b6 Apesar do uso de new[] e delete[] mostrado na se\u00e7\u00e3o anterior j\u00e1 ser mais conveniente, ainda s\u00e3o essencialmente um programa em C com sintaxe ligeiramente mais agrad\u00e1vel. Para tornar a programa\u00e7\u00e3o em C++ mais produtiva sua biblioteca padr\u00e3o conta com estruturas de dados prontas para uso. A estrutura std::vector \u00e9 um vetor din\u00e2mico que tem funcionalidades parecidas com a lista de Python ou o ArrayList de Java. O c\u00f3digo abaixo exemplifica seu uso e mostra algumas de suas fun\u00e7\u00f5es. Note que omitimos o uso de std no c\u00f3digo abaixo. int n ; cin >> n ; vector < double > vec ; for ( int i = 0 ; i < n ; i ++ ) { vec . push_back ( i * i ) } cout << \"Tamanho do vetor: \" << vec . size () << \" \\n \" ; cout << \"Primeiro elemento: \" << vec . front () << \" \\n \" ; cout << \"\u00daltimo elemento: \" << vec . back () << \" \\n \" ; cout << \"Elemento 3: \" << vec [ 2 ] << \" \\n \" ; Alguns pontos interessantes deste exemplo: N\u00e3o sabemos o tamanho de vec ao cri\u00e1-lo. O m\u00e9todo push_back aumenta ele quando necess\u00e1rio e n\u00e3o precisamos nos preocupar com isso. O n\u00famero de elementos colocados no vetor \u00e9 retornado pelo m\u00e9todo size() O acesso \u00e9 feito exatamente igual ao array de C, usando os colchetes [] E esse <double> na declara\u00e7\u00e3o? Em C++ tipos passados entre < > s\u00e3o usados para parametrizar tipos gen\u00e9ricos. Ou seja, um vetor pode guardar qualquer tipo de dado e precisamos indicar qual ao cri\u00e1-lo. Note que, portanto, um vetor vector<int> e um vetor vector<double> s\u00e3o considerados de tipos diferentes e n\u00e3o posso passar o primeiro para uma fun\u00e7\u00e3o esperando o segundo. Question Modifique sua Tarefa 4 para usar vector . Me\u00e7a o desempenho com o programa time e anote abaixo seus resultados.","title":"01 - Recursos \u00fateis de C++"},{"location":"aulas/01-introducao/#01-recursos-uteis-de-c","text":"A disciplina utilizar\u00e1 a linguagem C++ para implementa\u00e7\u00e3o dos programas. Ela \u00e9 muito usada em implementa\u00e7\u00f5es de alto desempenho e possui recursos muito \u00fateis e que simplificam a programa\u00e7\u00e3o se comparada com C puro. Nas aulas 01 e 02 aprenderemos alguns desses recursos e os utilizaremos para implementa\u00e7\u00e3o de algoritmos simples. Gabaritos e respostas Este curso n\u00e3o fornece c\u00f3digo de resposta para os exerc\u00edcios de sala. Cada exerc\u00edcio \u00e9 acompanhado de um algoritmo em pseudo-c\u00f3digo e alguns pares de arquivos entrada/sa\u00edda. Isto j\u00e1 \u00e9 suficiente para que voc\u00eas verifiquem se sua solu\u00e7\u00e3o est\u00e1 correta. Boas pr\u00e1ticas de programa\u00e7\u00e3o ser\u00e3o demonstradas em exerc\u00edcios corrigidos pelo professor durante o semestre. Uma lista (n\u00e3o exaustiva) dessas pr\u00e1ticas estar\u00e1 dispon\u00edveis na p\u00e1gina Projeto .","title":"01 - Recursos \u00fateis de C++"},{"location":"aulas/01-introducao/#compilacao","text":"Programas em C++ s\u00e3o compilados com o comando g++ . Ele funciona igual ao gcc que voc\u00eas j\u00e1 usaram em Desafios e Sistemas Hardware-Software. $> g++ arquivo.cpp -o executavel","title":"Compila\u00e7\u00e3o"},{"location":"aulas/01-introducao/#entrada-e-saida-em-c","text":"Em C usamos as fun\u00e7\u00f5es printf para mostrar dados no terminal e scanf para ler dados. Em C++ essas fun\u00e7\u00f5es tamb\u00e9m podem ser usadas, mas em geral s\u00e3o substitu\u00eddas pelos objetos std::cin e std::cout (dispon\u00edveis no cabe\u00e7alho iostream). A maior vantagem de usar cin e cout \u00e9 que n\u00e3o precisamos mais daquelas strings de formata\u00e7\u00e3o estranhas com %d , %s e afins. Podemos passar vari\u00e1veis diretamente para a sa\u00edda do terminal usando o operador << . Veja um exemplo abaixo. int a = 10 ; double b = 3.2 ; std :: cout << \"Sa\u00edda: \" << a << \";\" << b << \" \\n \" ; Example Crie um arquivo entrada-saida.cpp com uma fun\u00e7\u00e3o main que roda o c\u00f3digo acima. Compile e execute seu programa e verifique que ele mostra o valor correto no terminal. O mesmo vale para a entrada, mas desta vez \"tiramos\" os dados do objeto std::cin . O exemplo abaixo l\u00ea um inteiro e um double do terminal. int a ; double b ; std :: cin >> a >> b ; Example Modifique seu programa entrada-saida.cpp para ler \u00ea um n\u00famero inteiro n e mostrar sua divis\u00e3o fracion\u00e1ria por 2. Ou seja, antes de dividir converta n para double . E esse std:: ? Em C++ podemos ter v\u00e1rias fun\u00e7\u00f5es, vari\u00e1veis e objetos em geral com o mesmo nome. Para evitar que eles colidam e n\u00e3o se saiba a qual estamos nos referindo cada nome deve ser definido um namespace (literalmente espaco de nomes ). Podemos ter namespace s aninhados.Por exemplo, std::chrono cont\u00e9m as fun\u00e7\u00f5es relacionadas contagem de tempo durante a execu\u00e7\u00e3o de um programa. Todas as fun\u00e7\u00f5es, classes e globais na biblioteca padr\u00e3o est\u00e3o definidas no espa\u00e7o std . Se quisermos, podemos omitir escrever std:: toda vez digitando using namespace std . Isso pode ser feito tamb\u00e9m com namespaces aninhados. A implementa\u00e7\u00e3o de algoritmos definidos usando express\u00f5es matem\u00e1ticas \u00e9 uma habilidade importante neste curso. Example Escreva um programa que receba um inteiro n e calcule a seguinte s\u00e9rie. S = \\sum_{i=0}^n \\frac{1}{2^i} S = \\sum_{i=0}^n \\frac{1}{2^i} Mostre as primeiras 15 casas decimais de S . Veja a documenta\u00e7\u00e3o de std::setprecision aqui . Resposta Essa s\u00e9rie converge para o n\u00famero 2, mas sua resposta dever\u00e1 ser sempre menor que este n\u00famero. Logo, quanto maior n mais pr\u00f3xima sua resposta ser\u00e1. Seu programa dever\u00e1 implementar algo como o algoritmo abaixo. leia inteiro n s = 0.0 para i=0 at\u00e9 n s += 1 / (2 elevado a i) print(s)","title":"Entrada e sa\u00edda em C++"},{"location":"aulas/01-introducao/#alocacao-de-memoria","text":"Em C usamos as fun\u00e7\u00f5es malloc e free para alocar mem\u00f3ria dinamicamente. Um inconveniente dessas fun\u00e7\u00f5es \u00e9 que sempre temos que passar o tamanho que queremos em bytes. Em C++ essas fun\u00e7\u00f5es tamb\u00e9m est\u00e3o dispon\u00edveis, mas us\u00e1-las \u00e9 considerado uma m\u00e1 pr\u00e1tica. Ao inv\u00e9s, usamos os operadores new e delete para alocar mem\u00f3ria. Existem duas vantagens em us\u00e1-los. Podemos escrever diretamente o tipo que queremos, em vez de seu tamanho em bytes. A aloca\u00e7\u00e3o de arrays \u00e9 feita de maneira natural usando os colchetes [] . Vejamos o exemplo abaixo. int n ; std :: cin >> n ; double * values = new double [ n ]; /* usar values aqui */ delete [] values ; \u00c9 alocado um vetor de double de tamanho n (lido do terminal). Ap\u00f3s ele ser usado liberamos o espa\u00e7o alocado usando delete[] . E se eu quiser alocar um s\u00f3 valor? \u00c9 simples! \u00c9 s\u00f3 usar new sem os colchetes [] ! Example Crie um programa que l\u00ea um n\u00famero inteiro n e depois l\u00ea n n\u00fameros fracion\u00e1rios x_i x_i . Fa\u00e7a os seguintes c\u00e1lculos e motre-os no terminal com 10 casas decimais. \\mu = \\frac{1}{n} \\sum_{i=1}^n x_i \\mu = \\frac{1}{n} \\sum_{i=1}^n x_i \\sigma^2 = \\frac{1}{n} \\sum_{i=1}^n (x_i - \\mu)^2 \\sigma^2 = \\frac{1}{n} \\sum_{i=1}^n (x_i - \\mu)^2 Resposta Os arquivos t4-in-(1,2,3).txt e t4-out-(1,2,3).txt devem ser usados para testar seu programa. Question Voc\u00ea reconhece as f\u00f3rmulas acima? Elas calculam quais medidas estat\u00edsticas? Resposta M\u00e9dia e vari\u00e2ncia.","title":"Aloca\u00e7\u00e3o de mem\u00f3ria"},{"location":"aulas/01-introducao/#vetores-em-c","text":"Apesar do uso de new[] e delete[] mostrado na se\u00e7\u00e3o anterior j\u00e1 ser mais conveniente, ainda s\u00e3o essencialmente um programa em C com sintaxe ligeiramente mais agrad\u00e1vel. Para tornar a programa\u00e7\u00e3o em C++ mais produtiva sua biblioteca padr\u00e3o conta com estruturas de dados prontas para uso. A estrutura std::vector \u00e9 um vetor din\u00e2mico que tem funcionalidades parecidas com a lista de Python ou o ArrayList de Java. O c\u00f3digo abaixo exemplifica seu uso e mostra algumas de suas fun\u00e7\u00f5es. Note que omitimos o uso de std no c\u00f3digo abaixo. int n ; cin >> n ; vector < double > vec ; for ( int i = 0 ; i < n ; i ++ ) { vec . push_back ( i * i ) } cout << \"Tamanho do vetor: \" << vec . size () << \" \\n \" ; cout << \"Primeiro elemento: \" << vec . front () << \" \\n \" ; cout << \"\u00daltimo elemento: \" << vec . back () << \" \\n \" ; cout << \"Elemento 3: \" << vec [ 2 ] << \" \\n \" ; Alguns pontos interessantes deste exemplo: N\u00e3o sabemos o tamanho de vec ao cri\u00e1-lo. O m\u00e9todo push_back aumenta ele quando necess\u00e1rio e n\u00e3o precisamos nos preocupar com isso. O n\u00famero de elementos colocados no vetor \u00e9 retornado pelo m\u00e9todo size() O acesso \u00e9 feito exatamente igual ao array de C, usando os colchetes [] E esse <double> na declara\u00e7\u00e3o? Em C++ tipos passados entre < > s\u00e3o usados para parametrizar tipos gen\u00e9ricos. Ou seja, um vetor pode guardar qualquer tipo de dado e precisamos indicar qual ao cri\u00e1-lo. Note que, portanto, um vetor vector<int> e um vetor vector<double> s\u00e3o considerados de tipos diferentes e n\u00e3o posso passar o primeiro para uma fun\u00e7\u00e3o esperando o segundo. Question Modifique sua Tarefa 4 para usar vector . Me\u00e7a o desempenho com o programa time e anote abaixo seus resultados.","title":"Vetores em C++"},{"location":"projetos/","text":"Travelling Sales Person \u00b6 TODO: descri\u00e7\u00e3o do projeto aqui","title":"Travelling Sales Person"},{"location":"projetos/#travelling-sales-person","text":"TODO: descri\u00e7\u00e3o do projeto aqui","title":"Travelling Sales Person"},{"location":"projetos/checklist/","text":"Requisitos b\u00e1sicos de projeto \u00b6 Os seguintes pontos s\u00e3o obrigat\u00f3rios para todos projetos entregues na disciplina. Caso eles n\u00e3o sejam satisfeitos a nota final ser\u00e1 D . Se sua nota for maior que C e alguns desses itens for o \u00fanico problema da entrega voc\u00ea pode reentregar sem desconto de nota. Warning A condi\u00e7\u00e3o acima n\u00e3o vale para o projeto 0 - revis\u00e3o de C++ , j\u00e1 que grande parte dele \u00e9 realizar as tarefas abaixo. CMakeLists.txt gera um execut\u00e1vel por m\u00e9todo testado Relat\u00f3rio feito em Jupyter Notebook ou PWeave. Seu relat\u00f3rio deve conter as seguintes se\u00e7\u00f5es: Descri\u00e7\u00e3o do problema tratado Descri\u00e7\u00e3o dos testes feitos (tamanho de entradas, quantas execu\u00e7\u00f5es s\u00e3o feitas, como mediu tempo, infra usada) Organiza\u00e7\u00e3o em alto n\u00edvel de seu projeto. Vers\u00e3o j\u00e1 rodada do relat\u00f3rio exportada para PDF README.txt explicando como rodar seus testes (pode estar no relat\u00f3rio). Conjunto de testes automatizados (via script Python ou direto no relat\u00f3rio) Respeitar os formatos de entrada e sa\u00edda definidos nos enunciados. Seu programa dever\u00e1 retornar sempre o mesmo resultado. Os tempos ser\u00e3o ligeiramente diferentes em cada execu\u00e7\u00e3o, mas o resultado final dever\u00e1 ser sempre o mesmo.","title":"Requisitos b\u00e1sicos de projeto"},{"location":"projetos/checklist/#requisitos-basicos-de-projeto","text":"Os seguintes pontos s\u00e3o obrigat\u00f3rios para todos projetos entregues na disciplina. Caso eles n\u00e3o sejam satisfeitos a nota final ser\u00e1 D . Se sua nota for maior que C e alguns desses itens for o \u00fanico problema da entrega voc\u00ea pode reentregar sem desconto de nota. Warning A condi\u00e7\u00e3o acima n\u00e3o vale para o projeto 0 - revis\u00e3o de C++ , j\u00e1 que grande parte dele \u00e9 realizar as tarefas abaixo. CMakeLists.txt gera um execut\u00e1vel por m\u00e9todo testado Relat\u00f3rio feito em Jupyter Notebook ou PWeave. Seu relat\u00f3rio deve conter as seguintes se\u00e7\u00f5es: Descri\u00e7\u00e3o do problema tratado Descri\u00e7\u00e3o dos testes feitos (tamanho de entradas, quantas execu\u00e7\u00f5es s\u00e3o feitas, como mediu tempo, infra usada) Organiza\u00e7\u00e3o em alto n\u00edvel de seu projeto. Vers\u00e3o j\u00e1 rodada do relat\u00f3rio exportada para PDF README.txt explicando como rodar seus testes (pode estar no relat\u00f3rio). Conjunto de testes automatizados (via script Python ou direto no relat\u00f3rio) Respeitar os formatos de entrada e sa\u00edda definidos nos enunciados. Seu programa dever\u00e1 retornar sempre o mesmo resultado. Os tempos ser\u00e3o ligeiramente diferentes em cada execu\u00e7\u00e3o, mas o resultado final dever\u00e1 ser sempre o mesmo.","title":"Requisitos b\u00e1sicos de projeto"}]}