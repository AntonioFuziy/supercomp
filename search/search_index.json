{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SuperComputa\u00e7\u00e3o \u00b6 Bem vindo ao curso de SuperComputa\u00e7\u00e3o 2020/2. Professor : Igor Montagner Objetivos \u00b6 Ao final da disciplina o aluno ser\u00e1 capaz de: TODO: objetivos atualizados aqui Avalia\u00e7\u00e3o \u00b6 A avalia\u00e7\u00e3o da disciplina ser\u00e1 composta por provas, projetos e atividades de acompanhamentos: Provas Intermedi\u00e1ria (PI) e Final (PF) ser\u00e3o compostas por exerc\u00edcios pr\u00e1ticos a serem feitos durante o tempo de prova; O projeto da disciplina ser\u00e1 composto por m\u00faltiplas partes. Mais detalhes na p\u00e1gina de projetos A m\u00e9dia final \u00e9 dada por TODO: composi\u00e7\u00e3o da nota final aqui! Condi\u00e7\u00f5es de barreira TODO: crit\u00e9rios de barreira aqui! Mesmo que todas as condi\u00e7\u00f5es acima sejam satisfeitas \u00e9 poss\u00edvel reprovar. Um desempenho abaixo do esperado em uma atividade precisa ser compensado com um desempenho melhor em outra atividade.","title":"Home"},{"location":"#supercomputacao","text":"Bem vindo ao curso de SuperComputa\u00e7\u00e3o 2020/2. Professor : Igor Montagner","title":"SuperComputa\u00e7\u00e3o"},{"location":"#objetivos","text":"Ao final da disciplina o aluno ser\u00e1 capaz de: TODO: objetivos atualizados aqui","title":"Objetivos"},{"location":"#avaliacao","text":"A avalia\u00e7\u00e3o da disciplina ser\u00e1 composta por provas, projetos e atividades de acompanhamentos: Provas Intermedi\u00e1ria (PI) e Final (PF) ser\u00e3o compostas por exerc\u00edcios pr\u00e1ticos a serem feitos durante o tempo de prova; O projeto da disciplina ser\u00e1 composto por m\u00faltiplas partes. Mais detalhes na p\u00e1gina de projetos A m\u00e9dia final \u00e9 dada por TODO: composi\u00e7\u00e3o da nota final aqui! Condi\u00e7\u00f5es de barreira TODO: crit\u00e9rios de barreira aqui! Mesmo que todas as condi\u00e7\u00f5es acima sejam satisfeitas \u00e9 poss\u00edvel reprovar. Um desempenho abaixo do esperado em uma atividade precisa ser compensado com um desempenho melhor em outra atividade.","title":"Avalia\u00e7\u00e3o"},{"location":"sobre/","text":"Burocracias \u00b6 Turma 1 (Online) \u00b6 TER 09:45 - 11:45 SEX 07:30 - 09:30 Atendimento: Plano de aulas Data Quest\u00e3o/Problema Conte\u00fado/Atividade 25/08 Introdu\u00e7\u00e3o ao curso e a tecnologias de alto desempenho Introdu\u00e7\u00e3o ao curso; Princ\u00edpios de C++; Implementa\u00e7\u00e3o de algoritmos simples; Refer\u00eancia: Pacheco Cap 2. 28/08 Considera\u00e7\u00f5es na implementa\u00e7\u00e3o de programas de alto desempenho. Passagem de argumentos por refer\u00eancia e valor; Recursos de C++. 01/09 Estrat\u00e9gias de resolu\u00e7\u00e3o de problemas dif\u00edceis. nan 04/09 nan nan 08/09 Processamento de dados vetorial Instru\u00e7\u00f5es SIMD e compila\u00e7\u00e3o; Refer\u00eancia: Cap 2 Hager, Cap 3 Dubois 11/09 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Introdu\u00e7\u00e3o a problemas CPU bound; Modelo fork-join; Exemplo com threads C++11; Leitura: Cap 5 Hager 15/09 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Introdu\u00e7\u00e3o a OpenMP; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 18/09 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Opera\u00e7\u00f5es de redu\u00e7\u00e3o e escopo de vari\u00e1veis; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 22/09 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo C\u00f3digo thread-safety e reentr\u00e2ncia; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 25/09 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Introdu\u00e7\u00e3o a problemas IO bound; Constru\u00e7\u00f5es de alto n\u00edvel do OpenMP; Sincroniza\u00e7\u00e3o usando mutex e sem\u00e1foros.; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 29/09 nan nan 02/10 Prova Intermedi\u00e1ria Prova Intermedi\u00e1ria 06/10 Prova Intermedi\u00e1ria Prova Intermedi\u00e1ria 09/10 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Projeto 2 - vetoriza\u00e7\u00e3o e paraleliza\u00e7\u00e3o 13/10 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Projeto 2 - vetoriza\u00e7\u00e3o e paraleliza\u00e7\u00e3o 16/10 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Introdu\u00e7\u00e3o a GPGPU; Refer\u00eancia: Cap 1 Kirk 20/10 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Arquitetura de GPU em baixo n\u00edvel: Grid, Blocos e Threads; Leitura: Cap3 Gaster, Cap 3 Kirk 23/10 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Processando matrizes com Cuda C, profiling de c\u00f3digo em Cuda.; Refer\u00eancia: Cap 7 Kirk 27/10 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Exerc\u00edcios de programa\u00e7\u00e3o em GPGPU 30/10 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Otimizando c\u00f3digo Cuda C \u2013 mem\u00f3ria compartilhada; Refer\u00eancia: Cap 4 Kirk 03/11 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Projeto 3 - paraleliza\u00e7\u00e3o em GPU 06/11 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Projeto 3 - paraleliza\u00e7\u00e3o em GPU 10/11 nan nan 13/11 nan nan 17/11 nan nan 20/11 nan nan 24/11 nan nan 27/11 Prova Final Prova Final 01/12 Prova Final Prova Final Turma 2 (Presencial) \u00b6 QUA 13:30 - 15:30 SEX 13:30 - 15:30 Atendimento: Plano de aulas Data Quest\u00e3o/Problema Conte\u00fado/Atividade 26/08 Revis\u00e3o de programa\u00e7\u00e3o em C mais recursos novos em C++ Introdu\u00e7\u00e3o ao curso; Princ\u00edpios de C++; Refer\u00eancia: Pacheco Cap 2. 28/08 Revis\u00e3o de programa\u00e7\u00e3o em C mais recursos novos em C++ Orienta\u00e7\u00e3o a Objeto em C++; revis\u00e3o de ponteiros e passagem de argumentos por refer\u00eancia e valor 02/09 Revis\u00e3o de programa\u00e7\u00e3o em C mais recursos novos em C++ Conteiners STL: vector, string, map 04/09 Revis\u00e3o de programa\u00e7\u00e3o em C mais recursos novos em C++ Debug, profiling e compila\u00e7\u00e3o 09/09 Processamento de dados vetorial Instru\u00e7\u00f5es SIMD e compila\u00e7\u00e3o; Refer\u00eancia: Cap 2 Hager, Cap 3 Dubois 11/09 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Introdu\u00e7\u00e3o a problemas CPU bound; Modelo fork-join; Exemplo com threads C++11; Leitura: Cap 5 Hager 16/09 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Introdu\u00e7\u00e3o a OpenMP; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 18/09 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Opera\u00e7\u00f5es de redu\u00e7\u00e3o e escopo de vari\u00e1veis; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 23/09 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo C\u00f3digo thread-safety e reentr\u00e2ncia; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 25/09 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Introdu\u00e7\u00e3o a problemas IO bound; Constru\u00e7\u00f5es de alto n\u00edvel do OpenMP; Sincroniza\u00e7\u00e3o usando mutex e sem\u00e1foros.; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 30/09 Prova Intermedi\u00e1ria Prova Intermedi\u00e1ria 02/10 Prova Intermedi\u00e1ria Prova Intermedi\u00e1ria 07/10 Prova Intermedi\u00e1ria Prova Intermedi\u00e1ria 09/10 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Projeto 2 - vetoriza\u00e7\u00e3o e paraleliza\u00e7\u00e3o 14/10 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Projeto 2 - vetoriza\u00e7\u00e3o e paraleliza\u00e7\u00e3o 16/10 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Introdu\u00e7\u00e3o a GPGPU; Refer\u00eancia: Cap 1 Kirk 21/10 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Arquitetura de GPU em baixo n\u00edvel: Grid, Blocos e Threads; Leitura: Cap3 Gaster, Cap 3 Kirk 23/10 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Processando matrizes com Cuda C, profiling de c\u00f3digo em Cuda.; Refer\u00eancia: Cap 7 Kirk 28/10 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Exerc\u00edcios de programa\u00e7\u00e3o em GPGPU 30/10 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Otimizando c\u00f3digo Cuda C \u2013 mem\u00f3ria compartilhada; Refer\u00eancia: Cap 4 Kirk 04/11 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Projeto 3 - paraleliza\u00e7\u00e3o em GPU 06/11 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Projeto 3 - paraleliza\u00e7\u00e3o em GPU 11/11 nan nan 13/11 nan nan 18/11 nan nan 20/11 nan nan 25/11 Prova Final Prova Final 27/11 Prova Final Prova Final 02/12 Prova Final Prova Final","title":"Burocracias"},{"location":"sobre/#burocracias","text":"","title":"Burocracias"},{"location":"sobre/#turma-1-online","text":"TER 09:45 - 11:45 SEX 07:30 - 09:30 Atendimento: Plano de aulas Data Quest\u00e3o/Problema Conte\u00fado/Atividade 25/08 Introdu\u00e7\u00e3o ao curso e a tecnologias de alto desempenho Introdu\u00e7\u00e3o ao curso; Princ\u00edpios de C++; Implementa\u00e7\u00e3o de algoritmos simples; Refer\u00eancia: Pacheco Cap 2. 28/08 Considera\u00e7\u00f5es na implementa\u00e7\u00e3o de programas de alto desempenho. Passagem de argumentos por refer\u00eancia e valor; Recursos de C++. 01/09 Estrat\u00e9gias de resolu\u00e7\u00e3o de problemas dif\u00edceis. nan 04/09 nan nan 08/09 Processamento de dados vetorial Instru\u00e7\u00f5es SIMD e compila\u00e7\u00e3o; Refer\u00eancia: Cap 2 Hager, Cap 3 Dubois 11/09 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Introdu\u00e7\u00e3o a problemas CPU bound; Modelo fork-join; Exemplo com threads C++11; Leitura: Cap 5 Hager 15/09 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Introdu\u00e7\u00e3o a OpenMP; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 18/09 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Opera\u00e7\u00f5es de redu\u00e7\u00e3o e escopo de vari\u00e1veis; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 22/09 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo C\u00f3digo thread-safety e reentr\u00e2ncia; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 25/09 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Introdu\u00e7\u00e3o a problemas IO bound; Constru\u00e7\u00f5es de alto n\u00edvel do OpenMP; Sincroniza\u00e7\u00e3o usando mutex e sem\u00e1foros.; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 29/09 nan nan 02/10 Prova Intermedi\u00e1ria Prova Intermedi\u00e1ria 06/10 Prova Intermedi\u00e1ria Prova Intermedi\u00e1ria 09/10 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Projeto 2 - vetoriza\u00e7\u00e3o e paraleliza\u00e7\u00e3o 13/10 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Projeto 2 - vetoriza\u00e7\u00e3o e paraleliza\u00e7\u00e3o 16/10 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Introdu\u00e7\u00e3o a GPGPU; Refer\u00eancia: Cap 1 Kirk 20/10 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Arquitetura de GPU em baixo n\u00edvel: Grid, Blocos e Threads; Leitura: Cap3 Gaster, Cap 3 Kirk 23/10 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Processando matrizes com Cuda C, profiling de c\u00f3digo em Cuda.; Refer\u00eancia: Cap 7 Kirk 27/10 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Exerc\u00edcios de programa\u00e7\u00e3o em GPGPU 30/10 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Otimizando c\u00f3digo Cuda C \u2013 mem\u00f3ria compartilhada; Refer\u00eancia: Cap 4 Kirk 03/11 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Projeto 3 - paraleliza\u00e7\u00e3o em GPU 06/11 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Projeto 3 - paraleliza\u00e7\u00e3o em GPU 10/11 nan nan 13/11 nan nan 17/11 nan nan 20/11 nan nan 24/11 nan nan 27/11 Prova Final Prova Final 01/12 Prova Final Prova Final","title":"Turma 1 (Online)"},{"location":"sobre/#turma-2-presencial","text":"QUA 13:30 - 15:30 SEX 13:30 - 15:30 Atendimento: Plano de aulas Data Quest\u00e3o/Problema Conte\u00fado/Atividade 26/08 Revis\u00e3o de programa\u00e7\u00e3o em C mais recursos novos em C++ Introdu\u00e7\u00e3o ao curso; Princ\u00edpios de C++; Refer\u00eancia: Pacheco Cap 2. 28/08 Revis\u00e3o de programa\u00e7\u00e3o em C mais recursos novos em C++ Orienta\u00e7\u00e3o a Objeto em C++; revis\u00e3o de ponteiros e passagem de argumentos por refer\u00eancia e valor 02/09 Revis\u00e3o de programa\u00e7\u00e3o em C mais recursos novos em C++ Conteiners STL: vector, string, map 04/09 Revis\u00e3o de programa\u00e7\u00e3o em C mais recursos novos em C++ Debug, profiling e compila\u00e7\u00e3o 09/09 Processamento de dados vetorial Instru\u00e7\u00f5es SIMD e compila\u00e7\u00e3o; Refer\u00eancia: Cap 2 Hager, Cap 3 Dubois 11/09 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Introdu\u00e7\u00e3o a problemas CPU bound; Modelo fork-join; Exemplo com threads C++11; Leitura: Cap 5 Hager 16/09 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Introdu\u00e7\u00e3o a OpenMP; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 18/09 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Opera\u00e7\u00f5es de redu\u00e7\u00e3o e escopo de vari\u00e1veis; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 23/09 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo C\u00f3digo thread-safety e reentr\u00e2ncia; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 25/09 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Introdu\u00e7\u00e3o a problemas IO bound; Constru\u00e7\u00f5es de alto n\u00edvel do OpenMP; Sincroniza\u00e7\u00e3o usando mutex e sem\u00e1foros.; Refer\u00eancia: Cap 5 Pacheco e Cap 7 Sterling 30/09 Prova Intermedi\u00e1ria Prova Intermedi\u00e1ria 02/10 Prova Intermedi\u00e1ria Prova Intermedi\u00e1ria 07/10 Prova Intermedi\u00e1ria Prova Intermedi\u00e1ria 09/10 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Projeto 2 - vetoriza\u00e7\u00e3o e paraleliza\u00e7\u00e3o 14/10 Programa\u00e7\u00e3o multi-core: como dividir tarefas e ganhar tempo Projeto 2 - vetoriza\u00e7\u00e3o e paraleliza\u00e7\u00e3o 16/10 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Introdu\u00e7\u00e3o a GPGPU; Refer\u00eancia: Cap 1 Kirk 21/10 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Arquitetura de GPU em baixo n\u00edvel: Grid, Blocos e Threads; Leitura: Cap3 Gaster, Cap 3 Kirk 23/10 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Processando matrizes com Cuda C, profiling de c\u00f3digo em Cuda.; Refer\u00eancia: Cap 7 Kirk 28/10 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Exerc\u00edcios de programa\u00e7\u00e3o em GPGPU 30/10 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Otimizando c\u00f3digo Cuda C \u2013 mem\u00f3ria compartilhada; Refer\u00eancia: Cap 4 Kirk 04/11 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Projeto 3 - paraleliza\u00e7\u00e3o em GPU 06/11 Programa\u00e7\u00e3o em GPU: e problemas que s\u00e3o massivamente paraleliz\u00e1veis? Projeto 3 - paraleliza\u00e7\u00e3o em GPU 11/11 nan nan 13/11 nan nan 18/11 nan nan 20/11 nan nan 25/11 Prova Final Prova Final 27/11 Prova Final Prova Final 02/12 Prova Final Prova Final","title":"Turma 2 (Presencial)"},{"location":"projetos/","text":"Travelling Sales Person \u00b6 TODO: descri\u00e7\u00e3o do projeto aqui","title":"Travelling Sales Person"},{"location":"projetos/#travelling-sales-person","text":"TODO: descri\u00e7\u00e3o do projeto aqui","title":"Travelling Sales Person"},{"location":"projetos/checklist/","text":"Requisitos b\u00e1sicos de projeto \u00b6 Os seguintes pontos s\u00e3o obrigat\u00f3rios para todos projetos entregues na disciplina. Caso eles n\u00e3o sejam satisfeitos a nota final ser\u00e1 D . Se sua nota for maior que C e alguns desses itens for o \u00fanico problema da entrega voc\u00ea pode reentregar sem desconto de nota. Warning A condi\u00e7\u00e3o acima n\u00e3o vale para o projeto 0 - revis\u00e3o de C++ , j\u00e1 que grande parte dele \u00e9 realizar as tarefas abaixo. CMakeLists.txt gera um execut\u00e1vel por m\u00e9todo testado Relat\u00f3rio feito em Jupyter Notebook ou PWeave. Seu relat\u00f3rio deve conter as seguintes se\u00e7\u00f5es: Descri\u00e7\u00e3o do problema tratado Descri\u00e7\u00e3o dos testes feitos (tamanho de entradas, quantas execu\u00e7\u00f5es s\u00e3o feitas, como mediu tempo, infra usada) Organiza\u00e7\u00e3o em alto n\u00edvel de seu projeto. Vers\u00e3o j\u00e1 rodada do relat\u00f3rio exportada para PDF README.txt explicando como rodar seus testes (pode estar no relat\u00f3rio). Conjunto de testes automatizados (via script Python ou direto no relat\u00f3rio) Respeitar os formatos de entrada e sa\u00edda definidos nos enunciados. Seu programa dever\u00e1 retornar sempre o mesmo resultado. Os tempos ser\u00e3o ligeiramente diferentes em cada execu\u00e7\u00e3o, mas o resultado final dever\u00e1 ser sempre o mesmo.","title":"Requisitos b\u00e1sicos de projeto"},{"location":"projetos/checklist/#requisitos-basicos-de-projeto","text":"Os seguintes pontos s\u00e3o obrigat\u00f3rios para todos projetos entregues na disciplina. Caso eles n\u00e3o sejam satisfeitos a nota final ser\u00e1 D . Se sua nota for maior que C e alguns desses itens for o \u00fanico problema da entrega voc\u00ea pode reentregar sem desconto de nota. Warning A condi\u00e7\u00e3o acima n\u00e3o vale para o projeto 0 - revis\u00e3o de C++ , j\u00e1 que grande parte dele \u00e9 realizar as tarefas abaixo. CMakeLists.txt gera um execut\u00e1vel por m\u00e9todo testado Relat\u00f3rio feito em Jupyter Notebook ou PWeave. Seu relat\u00f3rio deve conter as seguintes se\u00e7\u00f5es: Descri\u00e7\u00e3o do problema tratado Descri\u00e7\u00e3o dos testes feitos (tamanho de entradas, quantas execu\u00e7\u00f5es s\u00e3o feitas, como mediu tempo, infra usada) Organiza\u00e7\u00e3o em alto n\u00edvel de seu projeto. Vers\u00e3o j\u00e1 rodada do relat\u00f3rio exportada para PDF README.txt explicando como rodar seus testes (pode estar no relat\u00f3rio). Conjunto de testes automatizados (via script Python ou direto no relat\u00f3rio) Respeitar os formatos de entrada e sa\u00edda definidos nos enunciados. Seu programa dever\u00e1 retornar sempre o mesmo resultado. Os tempos ser\u00e3o ligeiramente diferentes em cada execu\u00e7\u00e3o, mas o resultado final dever\u00e1 ser sempre o mesmo.","title":"Requisitos b\u00e1sicos de projeto"}]}